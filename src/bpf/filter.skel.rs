// SPDX-License-Identifier: (LGPL-2.1 OR BSD-2-Clause)
//
// THIS FILE IS AUTOGENERATED BY CARGO-LIBBPF-GEN!

pub use self::imp::*;

#[allow(renamed_and_removed_lints)]
#[allow(dead_code)]
#[allow(non_snake_case)]
#[allow(non_camel_case_types)]
#[allow(clippy::absolute_paths)]
#[allow(clippy::upper_case_acronyms)]
#[allow(clippy::zero_repeat_side_effects)]
#[warn(single_use_lifetimes)]
mod imp {
    #[allow(unused_imports, clippy::wildcard_imports)]
    use super::*;
    use libbpf_rs::libbpf_sys;
    use libbpf_rs::skel::OpenSkel;
    use libbpf_rs::skel::Skel;
    use libbpf_rs::skel::SkelBuilder;
    use libbpf_rs::AsRawLibbpf as _;
    use libbpf_rs::MapCore as _;
    fn build_skel_config(
    ) -> libbpf_rs::Result<libbpf_rs::__internal_skel::ObjectSkeletonConfig<'static>> {
        let mut builder = libbpf_rs::__internal_skel::ObjectSkeletonConfigBuilder::new(DATA);
        builder
            .name("filter_bpf")
            .map("banned_ips", false)
            .map("recently_banned_ips", false)
            .prog("xdp_filter");
        builder.build()
    }
    pub struct OpenFilterMaps<'obj> {
        pub banned_ips: libbpf_rs::OpenMapMut<'obj>,
        pub recently_banned_ips: libbpf_rs::OpenMapMut<'obj>,
        _phantom: std::marker::PhantomData<&'obj ()>,
    }

    impl<'obj> OpenFilterMaps<'obj> {
        #[allow(unused_variables)]
        unsafe fn new(
            config: &libbpf_rs::__internal_skel::ObjectSkeletonConfig<'_>,
            object: &mut libbpf_rs::OpenObject,
        ) -> libbpf_rs::Result<Self> {
            let mut banned_ips = None;
            let mut recently_banned_ips = None;
            let object = unsafe {
                std::mem::transmute::<&mut libbpf_rs::OpenObject, &'obj mut libbpf_rs::OpenObject>(
                    object,
                )
            };
            #[allow(clippy::never_loop)]
            for map in object.maps_mut() {
                let name = map.name().to_str().ok_or_else(|| {
                    libbpf_rs::Error::from(std::io::Error::new(
                        std::io::ErrorKind::InvalidData,
                        "map has invalid name",
                    ))
                })?;
                #[allow(clippy::match_single_binding)]
                match name {
                    "banned_ips" => banned_ips = Some(map),
                    "recently_banned_ips" => recently_banned_ips = Some(map),
                    _ => panic!("encountered unexpected map: `{name}`"),
                }
            }

            let slf = Self {
                banned_ips: banned_ips.expect("map `banned_ips` not present"),
                recently_banned_ips: recently_banned_ips
                    .expect("map `recently_banned_ips` not present"),
                _phantom: std::marker::PhantomData,
            };
            Ok(slf)
        }
    }
    pub struct FilterMaps<'obj> {
        pub banned_ips: libbpf_rs::MapMut<'obj>,
        pub recently_banned_ips: libbpf_rs::MapMut<'obj>,
        _phantom: std::marker::PhantomData<&'obj ()>,
    }

    impl<'obj> FilterMaps<'obj> {
        #[allow(unused_variables)]
        unsafe fn new(
            config: &libbpf_rs::__internal_skel::ObjectSkeletonConfig<'_>,
            object: &mut libbpf_rs::Object,
        ) -> libbpf_rs::Result<Self> {
            let mut banned_ips = None;
            let mut recently_banned_ips = None;
            let object = unsafe {
                std::mem::transmute::<&mut libbpf_rs::Object, &'obj mut libbpf_rs::Object>(object)
            };
            #[allow(clippy::never_loop)]
            for map in object.maps_mut() {
                let name = map.name().to_str().ok_or_else(|| {
                    libbpf_rs::Error::from(std::io::Error::new(
                        std::io::ErrorKind::InvalidData,
                        "map has invalid name",
                    ))
                })?;
                #[allow(clippy::match_single_binding)]
                match name {
                    "banned_ips" => banned_ips = Some(map),
                    "recently_banned_ips" => recently_banned_ips = Some(map),
                    _ => panic!("encountered unexpected map: `{name}`"),
                }
            }

            let slf = Self {
                banned_ips: banned_ips.expect("map `banned_ips` not present"),
                recently_banned_ips: recently_banned_ips
                    .expect("map `recently_banned_ips` not present"),
                _phantom: std::marker::PhantomData,
            };
            Ok(slf)
        }
    }
    pub struct OpenFilterProgs<'obj> {
        pub xdp_filter: libbpf_rs::OpenProgramMut<'obj>,
        _phantom: std::marker::PhantomData<&'obj ()>,
    }

    impl<'obj> OpenFilterProgs<'obj> {
        unsafe fn new(object: &mut libbpf_rs::OpenObject) -> libbpf_rs::Result<Self> {
            let mut xdp_filter = None;
            let object = unsafe {
                std::mem::transmute::<&mut libbpf_rs::OpenObject, &'obj mut libbpf_rs::OpenObject>(
                    object,
                )
            };
            for prog in object.progs_mut() {
                let name = prog.name().to_str().ok_or_else(|| {
                    libbpf_rs::Error::from(std::io::Error::new(
                        std::io::ErrorKind::InvalidData,
                        "prog has invalid name",
                    ))
                })?;
                match name {
                    "xdp_filter" => xdp_filter = Some(prog),
                    _ => panic!("encountered unexpected prog: `{name}`"),
                }
            }

            let slf = Self {
                xdp_filter: xdp_filter.expect("prog `xdp_filter` not present"),
                _phantom: std::marker::PhantomData,
            };
            Ok(slf)
        }
    }
    pub struct FilterProgs<'obj> {
        pub xdp_filter: libbpf_rs::ProgramMut<'obj>,
        _phantom: std::marker::PhantomData<&'obj ()>,
    }

    impl<'obj> FilterProgs<'obj> {
        #[allow(unused_variables)]
        fn new(open_progs: OpenFilterProgs<'obj>) -> Self {
            Self {
                xdp_filter: unsafe {
                    libbpf_rs::ProgramMut::new_mut(
                        open_progs.xdp_filter.as_libbpf_object().as_mut(),
                    )
                },
                _phantom: std::marker::PhantomData,
            }
        }
    }
    struct OwnedRef<'obj, O> {
        object: Option<&'obj mut std::mem::MaybeUninit<O>>,
    }

    impl<'obj, O> OwnedRef<'obj, O> {
        /// # Safety
        /// The object has to be initialized.
        unsafe fn new(object: &'obj mut std::mem::MaybeUninit<O>) -> Self {
            Self {
                object: Some(object),
            }
        }

        fn as_ref(&self) -> &O {
            // SAFETY: As per the contract during construction, the
            //         object has to be initialized.
            unsafe { self.object.as_ref().unwrap().assume_init_ref() }
        }

        fn as_mut(&mut self) -> &mut O {
            // SAFETY: As per the contract during construction, the
            //         object has to be initialized.
            unsafe { self.object.as_mut().unwrap().assume_init_mut() }
        }

        fn take(mut self) -> &'obj mut std::mem::MaybeUninit<O> {
            self.object.take().unwrap()
        }
    }

    impl<O> Drop for OwnedRef<'_, O> {
        fn drop(&mut self) {
            if let Some(object) = &mut self.object {
                unsafe { object.assume_init_drop() }
            }
        }
    }

    #[derive(Default)]
    pub struct FilterSkelBuilder {
        pub obj_builder: libbpf_rs::ObjectBuilder,
    }

    impl<'obj> FilterSkelBuilder {
        fn open_opts_impl(
            self,
            open_opts: *const libbpf_sys::bpf_object_open_opts,
            object: &'obj mut std::mem::MaybeUninit<libbpf_rs::OpenObject>,
        ) -> libbpf_rs::Result<OpenFilterSkel<'obj>> {
            let skel_config = build_skel_config()?;
            let skel_ptr = skel_config.as_libbpf_object();

            let ret =
                unsafe { libbpf_sys::bpf_object__open_skeleton(skel_ptr.as_ptr(), open_opts) };
            if ret != 0 {
                return Err(libbpf_rs::Error::from_raw_os_error(-ret));
            }

            // SAFETY: `skel_ptr` points to a valid object after the
            //         open call.
            let obj_ptr = unsafe { *skel_ptr.as_ref().obj };
            // SANITY: `bpf_object__open_skeleton` should have
            //         allocated the object.
            let obj_ptr = std::ptr::NonNull::new(obj_ptr).unwrap();
            // SAFETY: `obj_ptr` points to an opened object after
            //         skeleton open.
            let obj = unsafe { libbpf_rs::OpenObject::from_ptr(obj_ptr) };
            let _obj = object.write(obj);
            // SAFETY: We just wrote initialized data to `object`.
            let mut obj_ref = unsafe { OwnedRef::new(object) };

            #[allow(unused_mut)]
            let mut skel = OpenFilterSkel {
                maps: unsafe { OpenFilterMaps::new(&skel_config, obj_ref.as_mut())? },
                progs: unsafe { OpenFilterProgs::new(obj_ref.as_mut())? },
                obj: obj_ref,
                // SAFETY: Our `struct_ops` type contains only pointers,
                //         which are allowed to be NULL.
                // TODO: Generate and use a `Default` representation
                //       instead, to cut down on unsafe code.
                struct_ops: unsafe { std::mem::zeroed() },
                skel_config,
            };

            Ok(skel)
        }
    }

    impl<'obj> SkelBuilder<'obj> for FilterSkelBuilder {
        type Output = OpenFilterSkel<'obj>;
        fn open(
            self,
            object: &'obj mut std::mem::MaybeUninit<libbpf_rs::OpenObject>,
        ) -> libbpf_rs::Result<OpenFilterSkel<'obj>> {
            self.open_opts_impl(std::ptr::null(), object)
        }

        fn open_opts(
            self,
            open_opts: libbpf_sys::bpf_object_open_opts,
            object: &'obj mut std::mem::MaybeUninit<libbpf_rs::OpenObject>,
        ) -> libbpf_rs::Result<OpenFilterSkel<'obj>> {
            self.open_opts_impl(&open_opts, object)
        }

        fn object_builder(&self) -> &libbpf_rs::ObjectBuilder {
            &self.obj_builder
        }
        fn object_builder_mut(&mut self) -> &mut libbpf_rs::ObjectBuilder {
            &mut self.obj_builder
        }
    }

    #[derive(Debug, Clone)]
    #[repr(C)]
    pub struct StructOps {}

    impl StructOps {}
    pub mod types {
        #[allow(unused_imports)]
        use super::*;
        #[derive(Debug, Copy, Clone)]
        #[repr(C)]
        pub struct __anon_1 {
            pub r#type: *mut [i32; 1],
            pub max_entries: *mut [i32; 65536],
            pub key: *mut u32,
            pub value: *mut u8,
        }
        impl Default for __anon_1 {
            fn default() -> Self {
                Self {
                    r#type: std::ptr::null_mut(),
                    max_entries: std::ptr::null_mut(),
                    key: std::ptr::null_mut(),
                    value: std::ptr::null_mut(),
                }
            }
        }
        #[derive(Debug, Default, Copy, Clone)]
        #[repr(C)]
        pub struct xdp_md {
            pub data: u32,
            pub data_end: u32,
            pub data_meta: u32,
            pub ingress_ifindex: u32,
            pub rx_queue_index: u32,
            pub egress_ifindex: u32,
        }
        #[derive(Debug, Default, Copy, Clone)]
        #[repr(C)]
        pub struct ethhdr {
            pub h_dest: [u8; 6],
            pub h_source: [u8; 6],
            pub h_proto: u16,
        }
        #[derive(Debug, Default, Copy, Clone)]
        #[repr(C)]
        pub struct iphdr {
            pub __pad_0: [u8; 1],
            pub tos: u8,
            pub tot_len: u16,
            pub id: u16,
            pub frag_off: u16,
            pub ttl: u8,
            pub protocol: u8,
            pub check: u16,
            pub __anon_iphdr_1: __anon_iphdr_1,
        }
        #[derive(Copy, Clone)]
        #[repr(C)]
        pub union __anon_iphdr_1 {
            pub __anon_iphdr_2: __anon_iphdr_2,
            pub addrs: __anon_iphdr_2,
        }
        impl std::fmt::Debug for __anon_iphdr_1 {
            fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
                write!(f, "(???)")
            }
        }
        impl Default for __anon_iphdr_1 {
            fn default() -> Self {
                Self {
                    __anon_iphdr_2: __anon_iphdr_2::default(),
                }
            }
        }
        #[derive(Debug, Default, Copy, Clone)]
        #[repr(C)]
        pub struct __anon_iphdr_2 {
            pub saddr: u32,
            pub daddr: u32,
        }
        #[derive(Debug, Default, Copy, Clone)]
        #[repr(C)]
        pub struct tcphdr {
            pub source: u16,
            pub dest: u16,
            pub seq: u32,
            pub ack_seq: u32,
            pub __pad_12: [u8; 2],
            pub window: u16,
            pub check: u16,
            pub urg_ptr: u16,
        }
        #[derive(Debug, Copy, Clone)]
        #[repr(C)]
        pub struct license {
            pub LICENSE: [i8; 4],
        }
        #[derive(Debug, Copy, Clone)]
        #[repr(C)]
        pub struct maps {
            pub banned_ips: __anon_1,
            pub recently_banned_ips: __anon_1,
        }
    }
    pub struct OpenFilterSkel<'obj> {
        obj: OwnedRef<'obj, libbpf_rs::OpenObject>,
        pub maps: OpenFilterMaps<'obj>,
        pub progs: OpenFilterProgs<'obj>,
        pub struct_ops: StructOps,
        skel_config: libbpf_rs::__internal_skel::ObjectSkeletonConfig<'obj>,
    }

    impl<'obj> OpenSkel<'obj> for OpenFilterSkel<'obj> {
        type Output = FilterSkel<'obj>;
        fn load(self) -> libbpf_rs::Result<FilterSkel<'obj>> {
            let skel_ptr = self.skel_config.as_libbpf_object().as_ptr();

            let ret = unsafe { libbpf_sys::bpf_object__load_skeleton(skel_ptr) };
            if ret != 0 {
                return Err(libbpf_rs::Error::from_raw_os_error(-ret));
            }

            let obj_ref = self.obj.take();
            let open_obj = std::mem::replace(obj_ref, std::mem::MaybeUninit::uninit());
            // SAFETY: `open_obj` is guaranteed to be properly
            //         initialized as it came from an `OwnedRef`.
            let obj_ptr = unsafe { open_obj.assume_init().take_ptr() };
            // SAFETY: `obj_ptr` points to a loaded object after
            //         skeleton load.
            let obj = unsafe { libbpf_rs::Object::from_ptr(obj_ptr) };
            // SAFETY: `OpenObject` and `Object` are guaranteed to
            //         have the same memory layout.
            let obj_ref = unsafe {
                std::mem::transmute::<
                    &'obj mut std::mem::MaybeUninit<libbpf_rs::OpenObject>,
                    &'obj mut std::mem::MaybeUninit<libbpf_rs::Object>,
                >(obj_ref)
            };
            let _obj = obj_ref.write(obj);
            // SAFETY: We just wrote initialized data to `obj_ref`.
            let mut obj_ref = unsafe { OwnedRef::new(obj_ref) };

            Ok(FilterSkel {
                maps: unsafe { FilterMaps::new(&self.skel_config, obj_ref.as_mut())? },
                progs: FilterProgs::new(self.progs),
                obj: obj_ref,
                struct_ops: self.struct_ops,
                skel_config: self.skel_config,
                links: FilterLinks::default(),
            })
        }

        fn open_object(&self) -> &libbpf_rs::OpenObject {
            self.obj.as_ref()
        }

        fn open_object_mut(&mut self) -> &mut libbpf_rs::OpenObject {
            self.obj.as_mut()
        }
    }
    #[derive(Default)]
    pub struct FilterLinks {
        pub xdp_filter: Option<libbpf_rs::Link>,
    }
    pub struct FilterSkel<'obj> {
        obj: OwnedRef<'obj, libbpf_rs::Object>,
        pub maps: FilterMaps<'obj>,
        pub progs: FilterProgs<'obj>,
        struct_ops: StructOps,
        skel_config: libbpf_rs::__internal_skel::ObjectSkeletonConfig<'obj>,
        pub links: FilterLinks,
    }

    unsafe impl Send for FilterSkel<'_> {}
    unsafe impl Sync for FilterSkel<'_> {}

    impl<'obj> Skel<'obj> for FilterSkel<'obj> {
        fn object(&self) -> &libbpf_rs::Object {
            self.obj.as_ref()
        }

        fn object_mut(&mut self) -> &mut libbpf_rs::Object {
            self.obj.as_mut()
        }
        fn attach(&mut self) -> libbpf_rs::Result<()> {
            let skel_ptr = self.skel_config.as_libbpf_object().as_ptr();
            let ret = unsafe { libbpf_sys::bpf_object__attach_skeleton(skel_ptr) };
            if ret != 0 {
                return Err(libbpf_rs::Error::from_raw_os_error(-ret));
            }

            self.links = FilterLinks {
                xdp_filter: core::ptr::NonNull::new(self.skel_config.prog_link_ptr(0)?)
                    .map(|ptr| unsafe { libbpf_rs::Link::from_ptr(ptr) }),
            };

            Ok(())
        }
    }
    impl FilterSkel<'_> {
        pub fn struct_ops_raw(&self) -> *const StructOps {
            &self.struct_ops
        }

        pub fn struct_ops(&self) -> &StructOps {
            &self.struct_ops
        }
    }
    const DATA: &[u8] = &[
        127, 69, 76, 70, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 247, 0, 1, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 216, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0,
        0, 64, 0, 9, 0, 1, 0, 0, 46, 115, 116, 114, 116, 97, 98, 0, 46, 115, 121, 109, 116, 97, 98,
        0, 120, 100, 112, 0, 108, 105, 99, 101, 110, 115, 101, 0, 46, 109, 97, 112, 115, 0, 102,
        105, 108, 116, 101, 114, 46, 98, 112, 102, 46, 99, 0, 76, 66, 66, 48, 95, 49, 50, 0, 76,
        66, 66, 48, 95, 49, 49, 0, 120, 100, 112, 95, 102, 105, 108, 116, 101, 114, 0, 98, 97, 110,
        110, 101, 100, 95, 105, 112, 115, 0, 114, 101, 99, 101, 110, 116, 108, 121, 95, 98, 97,
        110, 110, 101, 100, 95, 105, 112, 115, 0, 76, 73, 67, 69, 78, 83, 69, 0, 46, 114, 101, 108,
        120, 100, 112, 0, 46, 66, 84, 70, 0, 46, 66, 84, 70, 46, 101, 120, 116, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 35, 0, 0, 0, 4, 0, 241, 255, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 48, 0, 0, 0, 0, 0, 3, 0, 56, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 56, 0, 0, 0, 0, 0, 3, 0, 184, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0,
        0, 18, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 2, 0, 0, 0, 0, 0, 0, 75, 0, 0, 0, 17, 0, 5, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 86, 0, 0, 0, 17, 0, 5, 0, 32, 0, 0, 0, 0,
        0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 106, 0, 0, 0, 17, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0,
        0, 0, 0, 0, 0, 0, 183, 0, 0, 0, 2, 0, 0, 0, 97, 22, 4, 0, 0, 0, 0, 0, 97, 18, 0, 0, 0, 0,
        0, 0, 191, 33, 0, 0, 0, 0, 0, 0, 7, 1, 0, 0, 14, 0, 0, 0, 45, 97, 65, 0, 0, 0, 0, 0, 105,
        35, 12, 0, 0, 0, 0, 0, 183, 0, 0, 0, 2, 0, 0, 0, 85, 3, 62, 0, 8, 0, 0, 0, 7, 2, 0, 0, 34,
        0, 0, 0, 183, 0, 0, 0, 2, 0, 0, 0, 45, 98, 59, 0, 0, 0, 0, 0, 113, 18, 0, 0, 0, 0, 0, 0,
        103, 2, 0, 0, 2, 0, 0, 0, 87, 2, 0, 0, 60, 0, 0, 0, 183, 3, 0, 0, 20, 0, 0, 0, 183, 0, 0,
        0, 2, 0, 0, 0, 45, 35, 53, 0, 0, 0, 0, 0, 191, 23, 0, 0, 0, 0, 0, 0, 15, 39, 0, 0, 0, 0, 0,
        0, 183, 0, 0, 0, 2, 0, 0, 0, 45, 103, 49, 0, 0, 0, 0, 0, 97, 18, 12, 0, 0, 0, 0, 0, 99, 42,
        252, 255, 0, 0, 0, 0, 113, 24, 9, 0, 0, 0, 0, 0, 191, 162, 0, 0, 0, 0, 0, 0, 7, 2, 0, 0,
        252, 255, 255, 255, 24, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 133, 0, 0, 0, 1, 0, 0,
        0, 191, 1, 0, 0, 0, 0, 0, 0, 183, 0, 0, 0, 1, 0, 0, 0, 85, 1, 38, 0, 0, 0, 0, 0, 191, 162,
        0, 0, 0, 0, 0, 0, 7, 2, 0, 0, 252, 255, 255, 255, 24, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 133, 0, 0, 0, 1, 0, 0, 0, 191, 1, 0, 0, 0, 0, 0, 0, 183, 0, 0, 0, 2, 0, 0, 0, 21,
        1, 30, 0, 0, 0, 0, 0, 87, 8, 0, 0, 255, 0, 0, 0, 183, 0, 0, 0, 2, 0, 0, 0, 85, 8, 27, 0, 6,
        0, 0, 0, 191, 113, 0, 0, 0, 0, 0, 0, 7, 1, 0, 0, 20, 0, 0, 0, 183, 0, 0, 0, 2, 0, 0, 0, 45,
        97, 23, 0, 0, 0, 0, 0, 105, 113, 12, 0, 0, 0, 0, 0, 87, 1, 0, 0, 0, 1, 0, 0, 85, 1, 4, 0,
        0, 0, 0, 0, 105, 113, 12, 0, 0, 0, 0, 0, 87, 1, 0, 0, 0, 4, 0, 0, 183, 0, 0, 0, 2, 0, 0, 0,
        21, 1, 16, 0, 0, 0, 0, 0, 183, 1, 0, 0, 1, 0, 0, 0, 115, 26, 251, 255, 0, 0, 0, 0, 191,
        166, 0, 0, 0, 0, 0, 0, 7, 6, 0, 0, 252, 255, 255, 255, 191, 163, 0, 0, 0, 0, 0, 0, 7, 3, 0,
        0, 251, 255, 255, 255, 24, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 191, 98, 0, 0, 0,
        0, 0, 0, 183, 4, 0, 0, 0, 0, 0, 0, 133, 0, 0, 0, 2, 0, 0, 0, 24, 1, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 191, 98, 0, 0, 0, 0, 0, 0, 133, 0, 0, 0, 3, 0, 0, 0, 183, 0, 0, 0, 2, 0,
        0, 0, 149, 0, 0, 0, 0, 0, 0, 0, 71, 80, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 216, 0, 0, 0, 0, 0, 0,
        0, 1, 0, 0, 0, 6, 0, 0, 0, 24, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 7, 0, 0, 0, 232, 1, 0, 0,
        0, 0, 0, 0, 1, 0, 0, 0, 6, 0, 0, 0, 16, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 7, 0, 0, 0, 159,
        235, 1, 0, 24, 0, 0, 0, 0, 0, 0, 0, 76, 4, 0, 0, 76, 4, 0, 0, 53, 5, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 2, 3, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 4, 0, 0, 0, 32, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
        3, 0, 0, 0, 0, 2, 0, 0, 0, 4, 0, 0, 0, 1, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 1, 4, 0, 0, 0, 32,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 2, 0, 0,
        0, 4, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2, 8, 0, 0, 0, 25, 0, 0, 0, 0, 0, 0, 8, 9,
        0, 0, 0, 31, 0, 0, 0, 0, 0, 0, 1, 4, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 11, 0,
        0, 0, 44, 0, 0, 0, 0, 0, 0, 8, 12, 0, 0, 0, 54, 0, 0, 0, 0, 0, 0, 8, 13, 0, 0, 0, 59, 0, 0,
        0, 0, 0, 0, 1, 1, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 4, 32, 0, 0, 0, 73, 0, 0, 0, 1,
        0, 0, 0, 0, 0, 0, 0, 78, 0, 0, 0, 5, 0, 0, 0, 64, 0, 0, 0, 90, 0, 0, 0, 7, 0, 0, 0, 128, 0,
        0, 0, 94, 0, 0, 0, 10, 0, 0, 0, 192, 0, 0, 0, 100, 0, 0, 0, 0, 0, 0, 14, 14, 0, 0, 0, 1, 0,
        0, 0, 111, 0, 0, 0, 0, 0, 0, 14, 14, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 18, 0, 0,
        0, 131, 0, 0, 0, 6, 0, 0, 4, 24, 0, 0, 0, 138, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 143, 0, 0,
        0, 8, 0, 0, 0, 32, 0, 0, 0, 152, 0, 0, 0, 8, 0, 0, 0, 64, 0, 0, 0, 162, 0, 0, 0, 8, 0, 0,
        0, 96, 0, 0, 0, 178, 0, 0, 0, 8, 0, 0, 0, 128, 0, 0, 0, 193, 0, 0, 0, 8, 0, 0, 0, 160, 0,
        0, 0, 0, 0, 0, 0, 1, 0, 0, 13, 2, 0, 0, 0, 208, 0, 0, 0, 17, 0, 0, 0, 212, 0, 0, 0, 1, 0,
        0, 12, 19, 0, 0, 0, 223, 0, 0, 0, 3, 0, 0, 4, 14, 0, 0, 0, 230, 0, 0, 0, 22, 0, 0, 0, 0, 0,
        0, 0, 237, 0, 0, 0, 22, 0, 0, 0, 48, 0, 0, 0, 246, 0, 0, 0, 23, 0, 0, 0, 96, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 13, 0, 0, 0, 4, 0, 0, 0, 6, 0, 0, 0, 254, 0, 0, 0, 0, 0, 0,
        8, 24, 0, 0, 0, 5, 1, 0, 0, 0, 0, 0, 8, 25, 0, 0, 0, 11, 1, 0, 0, 0, 0, 0, 1, 2, 0, 0, 0,
        16, 0, 0, 0, 26, 1, 0, 0, 10, 0, 0, 132, 20, 0, 0, 0, 32, 1, 0, 0, 12, 0, 0, 0, 0, 0, 0, 4,
        36, 1, 0, 0, 12, 0, 0, 0, 4, 0, 0, 4, 44, 1, 0, 0, 12, 0, 0, 0, 8, 0, 0, 0, 48, 1, 0, 0,
        23, 0, 0, 0, 16, 0, 0, 0, 56, 1, 0, 0, 23, 0, 0, 0, 32, 0, 0, 0, 59, 1, 0, 0, 23, 0, 0, 0,
        48, 0, 0, 0, 68, 1, 0, 0, 12, 0, 0, 0, 64, 0, 0, 0, 72, 1, 0, 0, 12, 0, 0, 0, 72, 0, 0, 0,
        81, 1, 0, 0, 27, 0, 0, 0, 80, 0, 0, 0, 0, 0, 0, 0, 28, 0, 0, 0, 96, 0, 0, 0, 87, 1, 0, 0,
        0, 0, 0, 8, 24, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 5, 8, 0, 0, 0, 0, 0, 0, 0, 29, 0, 0, 0, 0, 0,
        0, 0, 95, 1, 0, 0, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 4, 8, 0, 0, 0, 101, 1, 0,
        0, 30, 0, 0, 0, 0, 0, 0, 0, 107, 1, 0, 0, 30, 0, 0, 0, 32, 0, 0, 0, 113, 1, 0, 0, 0, 0, 0,
        8, 8, 0, 0, 0, 120, 1, 0, 0, 18, 0, 0, 132, 20, 0, 0, 0, 127, 1, 0, 0, 23, 0, 0, 0, 0, 0,
        0, 0, 134, 1, 0, 0, 23, 0, 0, 0, 16, 0, 0, 0, 139, 1, 0, 0, 30, 0, 0, 0, 32, 0, 0, 0, 143,
        1, 0, 0, 30, 0, 0, 0, 64, 0, 0, 0, 151, 1, 0, 0, 24, 0, 0, 0, 96, 0, 0, 1, 154, 1, 0, 0,
        24, 0, 0, 0, 97, 0, 0, 3, 159, 1, 0, 0, 24, 0, 0, 0, 100, 0, 0, 4, 164, 1, 0, 0, 24, 0, 0,
        0, 104, 0, 0, 1, 168, 1, 0, 0, 24, 0, 0, 0, 105, 0, 0, 1, 172, 1, 0, 0, 24, 0, 0, 0, 106,
        0, 0, 1, 176, 1, 0, 0, 24, 0, 0, 0, 107, 0, 0, 1, 180, 1, 0, 0, 24, 0, 0, 0, 108, 0, 0, 1,
        184, 1, 0, 0, 24, 0, 0, 0, 109, 0, 0, 1, 188, 1, 0, 0, 24, 0, 0, 0, 110, 0, 0, 1, 192, 1,
        0, 0, 24, 0, 0, 0, 111, 0, 0, 1, 196, 1, 0, 0, 23, 0, 0, 0, 112, 0, 0, 0, 81, 1, 0, 0, 27,
        0, 0, 0, 128, 0, 0, 0, 203, 1, 0, 0, 23, 0, 0, 0, 144, 0, 0, 0, 211, 1, 0, 0, 0, 0, 0, 1,
        1, 0, 0, 0, 8, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 32, 0, 0, 0, 4, 0, 0, 0, 4, 0,
        0, 0, 216, 1, 0, 0, 0, 0, 0, 14, 33, 0, 0, 0, 1, 0, 0, 0, 35, 5, 0, 0, 1, 0, 0, 15, 4, 0,
        0, 0, 34, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 43, 5, 0, 0, 2, 0, 0, 15, 64, 0, 0, 0, 15, 0, 0,
        0, 0, 0, 0, 0, 32, 0, 0, 0, 16, 0, 0, 0, 32, 0, 0, 0, 32, 0, 0, 0, 0, 105, 110, 116, 0, 95,
        95, 65, 82, 82, 65, 89, 95, 83, 73, 90, 69, 95, 84, 89, 80, 69, 95, 95, 0, 95, 95, 117, 51,
        50, 0, 117, 110, 115, 105, 103, 110, 101, 100, 32, 105, 110, 116, 0, 105, 112, 95, 102,
        108, 97, 103, 95, 116, 0, 95, 95, 117, 56, 0, 117, 110, 115, 105, 103, 110, 101, 100, 32,
        99, 104, 97, 114, 0, 116, 121, 112, 101, 0, 109, 97, 120, 95, 101, 110, 116, 114, 105, 101,
        115, 0, 107, 101, 121, 0, 118, 97, 108, 117, 101, 0, 98, 97, 110, 110, 101, 100, 95, 105,
        112, 115, 0, 114, 101, 99, 101, 110, 116, 108, 121, 95, 98, 97, 110, 110, 101, 100, 95,
        105, 112, 115, 0, 120, 100, 112, 95, 109, 100, 0, 100, 97, 116, 97, 0, 100, 97, 116, 97,
        95, 101, 110, 100, 0, 100, 97, 116, 97, 95, 109, 101, 116, 97, 0, 105, 110, 103, 114, 101,
        115, 115, 95, 105, 102, 105, 110, 100, 101, 120, 0, 114, 120, 95, 113, 117, 101, 117, 101,
        95, 105, 110, 100, 101, 120, 0, 101, 103, 114, 101, 115, 115, 95, 105, 102, 105, 110, 100,
        101, 120, 0, 99, 116, 120, 0, 120, 100, 112, 95, 102, 105, 108, 116, 101, 114, 0, 101, 116,
        104, 104, 100, 114, 0, 104, 95, 100, 101, 115, 116, 0, 104, 95, 115, 111, 117, 114, 99,
        101, 0, 104, 95, 112, 114, 111, 116, 111, 0, 95, 95, 98, 101, 49, 54, 0, 95, 95, 117, 49,
        54, 0, 117, 110, 115, 105, 103, 110, 101, 100, 32, 115, 104, 111, 114, 116, 0, 105, 112,
        104, 100, 114, 0, 105, 104, 108, 0, 118, 101, 114, 115, 105, 111, 110, 0, 116, 111, 115, 0,
        116, 111, 116, 95, 108, 101, 110, 0, 105, 100, 0, 102, 114, 97, 103, 95, 111, 102, 102, 0,
        116, 116, 108, 0, 112, 114, 111, 116, 111, 99, 111, 108, 0, 99, 104, 101, 99, 107, 0, 95,
        95, 115, 117, 109, 49, 54, 0, 97, 100, 100, 114, 115, 0, 115, 97, 100, 100, 114, 0, 100,
        97, 100, 100, 114, 0, 95, 95, 98, 101, 51, 50, 0, 116, 99, 112, 104, 100, 114, 0, 115, 111,
        117, 114, 99, 101, 0, 100, 101, 115, 116, 0, 115, 101, 113, 0, 97, 99, 107, 95, 115, 101,
        113, 0, 97, 101, 0, 114, 101, 115, 49, 0, 100, 111, 102, 102, 0, 102, 105, 110, 0, 115,
        121, 110, 0, 114, 115, 116, 0, 112, 115, 104, 0, 97, 99, 107, 0, 117, 114, 103, 0, 101, 99,
        101, 0, 99, 119, 114, 0, 119, 105, 110, 100, 111, 119, 0, 117, 114, 103, 95, 112, 116, 114,
        0, 99, 104, 97, 114, 0, 76, 73, 67, 69, 78, 83, 69, 0, 47, 104, 111, 109, 101, 47, 118,
        115, 99, 111, 100, 101, 47, 119, 111, 114, 107, 115, 112, 97, 99, 101, 47, 98, 112, 102,
        45, 102, 105, 114, 101, 119, 97, 108, 108, 47, 115, 114, 99, 47, 98, 112, 102, 47, 102,
        105, 108, 116, 101, 114, 46, 98, 112, 102, 46, 99, 0, 105, 110, 116, 32, 120, 100, 112, 95,
        102, 105, 108, 116, 101, 114, 40, 115, 116, 114, 117, 99, 116, 32, 120, 100, 112, 95, 109,
        100, 32, 42, 99, 116, 120, 41, 0, 9, 118, 111, 105, 100, 32, 42, 100, 97, 116, 97, 95, 101,
        110, 100, 32, 61, 32, 40, 118, 111, 105, 100, 32, 42, 41, 40, 108, 111, 110, 103, 41, 99,
        116, 120, 45, 62, 100, 97, 116, 97, 95, 101, 110, 100, 59, 0, 9, 118, 111, 105, 100, 32,
        42, 100, 97, 116, 97, 32, 61, 32, 40, 118, 111, 105, 100, 32, 42, 41, 40, 108, 111, 110,
        103, 41, 99, 116, 120, 45, 62, 100, 97, 116, 97, 59, 0, 9, 105, 102, 32, 40, 40, 118, 111,
        105, 100, 32, 42, 41, 40, 101, 116, 104, 32, 43, 32, 49, 41, 32, 62, 32, 100, 97, 116, 97,
        95, 101, 110, 100, 41, 0, 9, 95, 95, 117, 49, 54, 32, 104, 95, 112, 114, 111, 116, 111, 32,
        61, 32, 98, 112, 102, 95, 110, 116, 111, 104, 115, 40, 101, 116, 104, 45, 62, 104, 95, 112,
        114, 111, 116, 111, 41, 59, 0, 9, 105, 102, 32, 40, 104, 95, 112, 114, 111, 116, 111, 32,
        33, 61, 32, 48, 120, 48, 56, 48, 48, 41, 0, 9, 95, 95, 117, 51, 50, 32, 105, 104, 108, 95,
        108, 101, 110, 32, 61, 32, 105, 112, 104, 45, 62, 105, 104, 108, 32, 42, 32, 52, 59, 0, 9,
        105, 102, 32, 40, 105, 104, 108, 95, 108, 101, 110, 32, 60, 32, 115, 105, 122, 101, 111,
        102, 40, 42, 105, 112, 104, 41, 41, 0, 9, 105, 102, 32, 40, 40, 118, 111, 105, 100, 32, 42,
        41, 105, 112, 104, 32, 43, 32, 105, 104, 108, 95, 108, 101, 110, 32, 62, 32, 100, 97, 116,
        97, 95, 101, 110, 100, 41, 0, 9, 42, 115, 114, 99, 32, 61, 32, 105, 112, 104, 45, 62, 115,
        97, 100, 100, 114, 59, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 47, 47, 32, 110,
        101, 116, 119, 111, 114, 107, 32, 98, 121, 116, 101, 32, 111, 114, 100, 101, 114, 0, 9, 42,
        112, 114, 111, 116, 111, 32, 61, 32, 105, 112, 104, 45, 62, 112, 114, 111, 116, 111, 99,
        111, 108, 59, 32, 47, 47, 32, 54, 32, 61, 61, 32, 84, 67, 80, 0, 9, 105, 112, 95, 102, 108,
        97, 103, 95, 116, 32, 42, 102, 108, 97, 103, 32, 61, 32, 98, 112, 102, 95, 109, 97, 112,
        95, 108, 111, 111, 107, 117, 112, 95, 101, 108, 101, 109, 40, 38, 98, 97, 110, 110, 101,
        100, 95, 105, 112, 115, 44, 32, 38, 115, 114, 99, 95, 105, 112, 41, 59, 0, 9, 105, 102, 32,
        40, 102, 108, 97, 103, 41, 0, 9, 105, 112, 95, 102, 108, 97, 103, 95, 116, 32, 42, 114,
        101, 99, 101, 110, 116, 32, 61, 32, 98, 112, 102, 95, 109, 97, 112, 95, 108, 111, 111, 107,
        117, 112, 95, 101, 108, 101, 109, 40, 38, 114, 101, 99, 101, 110, 116, 108, 121, 95, 98,
        97, 110, 110, 101, 100, 95, 105, 112, 115, 44, 32, 38, 115, 114, 99, 95, 105, 112, 41, 59,
        0, 9, 105, 102, 32, 40, 114, 101, 99, 101, 110, 116, 41, 32, 123, 0, 9, 9, 9, 9, 105, 102,
        32, 40, 116, 99, 112, 45, 62, 102, 105, 110, 32, 124, 124, 32, 116, 99, 112, 45, 62, 114,
        115, 116, 41, 32, 123, 0, 9, 9, 9, 9, 9, 105, 112, 95, 102, 108, 97, 103, 95, 116, 32, 111,
        110, 101, 32, 61, 32, 49, 59, 0, 9, 9, 9, 9, 9, 98, 112, 102, 95, 109, 97, 112, 95, 117,
        112, 100, 97, 116, 101, 95, 101, 108, 101, 109, 40, 38, 98, 97, 110, 110, 101, 100, 95,
        105, 112, 115, 44, 32, 38, 115, 114, 99, 95, 105, 112, 44, 32, 38, 111, 110, 101, 44, 32,
        66, 80, 70, 95, 65, 78, 89, 41, 59, 0, 9, 9, 9, 9, 9, 98, 112, 102, 95, 109, 97, 112, 95,
        100, 101, 108, 101, 116, 101, 95, 101, 108, 101, 109, 40, 38, 114, 101, 99, 101, 110, 116,
        108, 121, 95, 98, 97, 110, 110, 101, 100, 95, 105, 112, 115, 44, 32, 38, 115, 114, 99, 95,
        105, 112, 41, 59, 0, 125, 0, 48, 58, 49, 0, 48, 58, 48, 0, 48, 58, 50, 0, 48, 58, 57, 58,
        48, 58, 48, 0, 48, 58, 55, 0, 48, 58, 57, 0, 108, 105, 99, 101, 110, 115, 101, 0, 46, 109,
        97, 112, 115, 0, 120, 100, 112, 0, 0, 0, 0, 0, 0, 0, 0, 159, 235, 1, 0, 32, 0, 0, 0, 0, 0,
        0, 0, 20, 0, 0, 0, 20, 0, 0, 0, 12, 2, 0, 0, 32, 2, 0, 0, 140, 0, 0, 0, 8, 0, 0, 0, 49, 5,
        0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 20, 0, 0, 0, 16, 0, 0, 0, 49, 5, 0, 0, 32, 0, 0, 0, 0, 0, 0,
        0, 224, 1, 0, 0, 25, 2, 0, 0, 0, 68, 1, 0, 8, 0, 0, 0, 224, 1, 0, 0, 60, 2, 0, 0, 38, 76,
        1, 0, 16, 0, 0, 0, 224, 1, 0, 0, 107, 2, 0, 0, 34, 80, 1, 0, 24, 0, 0, 0, 224, 1, 0, 0,
        146, 2, 0, 0, 19, 224, 0, 0, 40, 0, 0, 0, 224, 1, 0, 0, 146, 2, 0, 0, 6, 224, 0, 0, 48, 0,
        0, 0, 224, 1, 0, 0, 181, 2, 0, 0, 18, 236, 0, 0, 64, 0, 0, 0, 224, 1, 0, 0, 223, 2, 0, 0,
        6, 244, 0, 0, 96, 0, 0, 0, 224, 1, 0, 0, 247, 2, 0, 0, 23, 16, 1, 0, 104, 0, 0, 0, 224, 1,
        0, 0, 247, 2, 0, 0, 27, 16, 1, 0, 136, 0, 0, 0, 224, 1, 0, 0, 22, 3, 0, 0, 6, 20, 1, 0,
        144, 0, 0, 0, 224, 1, 0, 0, 51, 3, 0, 0, 18, 28, 1, 0, 168, 0, 0, 0, 224, 1, 0, 0, 51, 3,
        0, 0, 6, 28, 1, 0, 176, 0, 0, 0, 224, 1, 0, 0, 90, 3, 0, 0, 14, 40, 1, 0, 184, 0, 0, 0,
        224, 1, 0, 0, 90, 3, 0, 0, 7, 40, 1, 0, 192, 0, 0, 0, 224, 1, 0, 0, 143, 3, 0, 0, 16, 44,
        1, 0, 208, 0, 0, 0, 224, 1, 0, 0, 90, 3, 0, 0, 14, 40, 1, 0, 216, 0, 0, 0, 224, 1, 0, 0,
        180, 3, 0, 0, 20, 116, 1, 0, 0, 1, 0, 0, 224, 1, 0, 0, 242, 3, 0, 0, 6, 120, 1, 0, 16, 1,
        0, 0, 224, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 1, 0, 0, 224, 1, 0, 0, 253, 3, 0, 0, 22,
        136, 1, 0, 64, 1, 0, 0, 224, 1, 0, 0, 70, 4, 0, 0, 6, 140, 1, 0, 128, 1, 0, 0, 224, 1, 0,
        0, 85, 4, 0, 0, 14, 160, 1, 0, 136, 1, 0, 0, 224, 1, 0, 0, 85, 4, 0, 0, 9, 160, 1, 0, 144,
        1, 0, 0, 224, 1, 0, 0, 85, 4, 0, 0, 18, 160, 1, 0, 152, 1, 0, 0, 224, 1, 0, 0, 85, 4, 0, 0,
        26, 160, 1, 0, 160, 1, 0, 0, 224, 1, 0, 0, 85, 4, 0, 0, 21, 160, 1, 0, 176, 1, 0, 0, 224,
        1, 0, 0, 85, 4, 0, 0, 9, 160, 1, 0, 192, 1, 0, 0, 224, 1, 0, 0, 117, 4, 0, 0, 16, 164, 1,
        0, 208, 1, 0, 0, 224, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 232, 1, 0, 0, 224, 1, 0, 0, 141, 4,
        0, 0, 6, 168, 1, 0, 16, 2, 0, 0, 224, 1, 0, 0, 204, 4, 0, 0, 6, 172, 1, 0, 56, 2, 0, 0,
        224, 1, 0, 0, 5, 5, 0, 0, 1, 208, 1, 0, 16, 0, 0, 0, 49, 5, 0, 0, 8, 0, 0, 0, 8, 0, 0, 0,
        18, 0, 0, 0, 7, 5, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 18, 0, 0, 0, 11, 5, 0, 0, 0, 0, 0, 0, 48,
        0, 0, 0, 21, 0, 0, 0, 15, 5, 0, 0, 0, 0, 0, 0, 96, 0, 0, 0, 26, 0, 0, 0, 11, 5, 0, 0, 0, 0,
        0, 0, 176, 0, 0, 0, 26, 0, 0, 0, 19, 5, 0, 0, 0, 0, 0, 0, 192, 0, 0, 0, 26, 0, 0, 0, 27, 5,
        0, 0, 0, 0, 0, 0, 128, 1, 0, 0, 31, 0, 0, 0, 27, 5, 0, 0, 0, 0, 0, 0, 152, 1, 0, 0, 31, 0,
        0, 0, 31, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 3, 0, 0, 0, 32, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 136, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 2, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 200, 0, 0, 0, 0, 0, 0, 0, 216, 0, 0, 0,
        0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 0, 17, 0,
        0, 0, 1, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 160, 1, 0, 0, 0, 0, 0, 0,
        64, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 21, 0, 0, 0, 1, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 224, 3, 0,
        0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 29, 0, 0, 0, 1, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 232, 3, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 114, 0, 0, 0, 9, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 40, 4, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0,
        0, 8, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 122, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 104, 4, 0, 0, 0, 0, 0, 0, 153, 9, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 127, 0, 0, 0, 1, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 14, 0, 0, 0, 0, 0, 0, 204, 2, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    ];
}
